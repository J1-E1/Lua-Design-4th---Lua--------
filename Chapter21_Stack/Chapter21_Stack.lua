---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2023/3/5 20:49
---
--- stack , push, pop ,top , isempt

local Stack = {}

function Stack:new(o)
    o = o or {}
    self.__index = self
    setmetatable(o, self)
    o.length = 0
    o.list = {}
    return o
end

function Stack:push(v)
    assert(v, "push data is nil")
    self.list[self.length + 1] = v
    self.length = self.length + 1
end

function Stack:pushALl(...)
    local vi = { ... }
    for _, v in ipairs(vi) do
        table.insert(self.list, v)
        self.length = self.length + 1
    end
end

function Stack:pop()
    local popedvalue = nil
    if self:isempty() then
        print("this stack is empty")
    else
        popedvalue = self.list[self.length]
        table.remove(self.list, self.length)
        self.length = self.length - 1
    end
    return popedvalue
end

function Stack:top()
    if self:isempty() then
        print("this stack is empty")
    end
    return self.list[self.length]
end

function Stack:isempty()
    return self.length == 0
end

function Stack:showlist()
    for i, v in ipairs(self.list) do
        print(i, v)
    end
end

--- 使用
--local stack1 = Stack:new()
--stack1:push(1)
--stack1:push(2)
--stack1:push(4)
--stack1:pushALl(3,56,6)
--stack1:showlist()
--print("--------")
--print( stack1:top())
--print("--------")
--stack1:pop()
--stack1:showlist()

--- 实现一个子类 StackQueue ， 增加一个方法insertbotton，在栈底插入一个以元素
local StackQueue = Stack:new()
StackQueue.__index = StackQueue
function StackQueue:insertBotton(v)
    table.insert(self.list, 1, v)
    self.length = self.length + 1
end

----- 使用
--local stackque = StackQueue:new()
--stackque:pushALl(1,24,5,6)
--stackque:showlist()
--print("----------")
--stackque:insertBotton(7)
--stackque:showlist()

--- 使用对偶表示重写Stack

local DualStack = {}
local stackpool = {}

function DualStack:new(o)
    o = o or {}
    self.__index = self
    setmetatable(o, self)
    stackpool[o] = {}
    return o
end

function DualStack:isempty()
    return #stackpool[self] == 0
end

function DualStack:pushALl(...)
    local vi = { ... }
    for _, v in ipairs(vi) do
        table.insert(stackpool[self], v)
    end
end

function DualStack:pop()
    local popedvalue = nil
    if self:isempty() then
        print("this stack is empty")
    else
        popedvalue = stackpool[self][#stackpool[self]]
        table.remove(stackpool[self], #stackpool[self]) -- list, pos

    end
    return popedvalue
end

function DualStack:showlist()
    for i, v in ipairs(stackpool[self]) do
        print(i, v)
    end
end

--- 测试
local stk = DualStack:new()

stk:pushALl(123, 122, 44)
stk:showlist()
------
print("removed item = " .. stk:pop())
stk:showlist()