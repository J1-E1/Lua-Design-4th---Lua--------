---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2023/3/20 22:15
---

---@class Dictionary 字典类型
local Dictionary = {}

---@return Dictionary
---@field count number the total count
function Dictionary:New(tk, tv)
    local o = {keyType = tk, valueType = tv}
    self.__index = self
    setmetatable(o, self)
    o.valueList = {}
    o.count = 0
    return o
end

function Dictionary:Add(key, value)
    if key == nil then
        print("the key is nil")
        return
    end

    if self.valueList[key] ~= nil then
        self.valueList[key] = value
    else
        self.valueList[key] = value
        self.count = self.count + 1
    end
end

function Dictionary:Clear()
    ---@type number
    for _, v in ipairs(self.valueList) do
        v = nil
        self.count = self.count - 1
    end
    print("All parameters in the dictionary have been cleared ")
end

function Dictionary:ContainsKey(key)
    for k, _ in pairs(self.valueList) do
        if k == key then
            return true
        end
    end
    return false
end


function Dictionary:ContainsValue(value)
    for _, v in pairs(self.valueList) do
        if v == value then
            return true
        end
    end
    return false
end

function Dictionary:count()
    --- may have the functionreturn  table.getn(self.keyList)
    return self.count
end

-- 当使用for in 时到nil 跳出
function Dictionary:Iter()
    local i = 0
    local n = self.count
    return function()
        i = i + 1
        if i <= n then
            return self[self.keyList[i]]
        end
        return nil
    end
end



function Dictionary:KeyType()
    return self.keyType
end

function Dictionary:ValueType()
    return self.valueType
end


--- test

local D1 = Dictionary:New(type(string) , type(0))
D1:Add("the one", 1)
print(D1.valueList["the one"])

print("ContainsKey" .. D1:ContainsKey("the one"))

